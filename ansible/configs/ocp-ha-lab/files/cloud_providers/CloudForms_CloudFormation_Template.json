{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": { },
  "Mappings": {
    "RegionMapping": {
      "us-east-1": {
        "AMI": "ami-2051294a"
      },
      "us-east-2": {
        "AMI": "Not Available"
      },
      "us-west-1": {
        "AMI": "ami-d1315fb1"
      },
      "us-west-2": {
        "AMI": "ami-775e4f16"
      },
      "eu-west-1": {
        "AMI": "ami-8b8c57f8"
      },
      "eu-central-1": {
        "AMI": "ami-875042eb"
      },
      "ap-northeast-1": {
        "AMI": "ami-0dd8f963"
      },
      "ap-northeast-2": {
        "AMI": "ami-44db152a"
      },
      "ap-southeast-1": {
        "AMI": "ami-3f03c55c"
      },
      "ap-southeast-2": {
        "AMI": "ami-e0c19f83"
      },
      "sa-east-1": {
        "AMI": "ami-27b3094b"
      }
    },
    "DNSMapping": {
      "us-east-1": {
        "domain": "us-east-1.compute.internal"
      },
      "us-west-1": {
        "domain": "us-west-1.compute.internal"
      },
      "us-west-2": {
        "domain": "us-west-2.compute.internal"
      },
      "eu-west-1": {
        "domain": "eu-west-1.compute.internal"
      },
      "eu-central-1": {
        "domain": "eu-central-1.compute.internal"
      },
      "ap-northeast-1": {
        "domain": "ap-northeast-1.compute.internal"
      },
      "ap-northeast-2": {
        "domain": "ap-northeast-2.compute.internal"
      },
      "ap-southeast-1": {
        "domain": "ap-southeast-1.compute.internal"
      },
      "ap-southeast-2": {
        "domain": "ap-southeast-2.compute.internal"
      },
      "sa-east-1": {
        "domain": "sa-east-1.compute.internal"
      }
    }
  },
  "Resources": {
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "192.199.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPCID_NAME_TAG"
          },
          {
            "Key": "Hostlication",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "VpcInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {}
    },
    "VpcGA": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VpcInternetGateway"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "VpcRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "VPCRouteInternetGateway": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "GatewayId": {
          "Ref": "VpcInternetGateway"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "VpcRouteTable"
        }
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": [
        "Vpc"
      ],
      "Properties": {
        "CidrBlock": "192.199.0.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" } ]] }
          },
          {
            "Key": "Hostlication",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ],
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicSubnetRTA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }
    },
    "HostSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Host",
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "host_sg"
          }
        ]
      }
    },
    "HostUDPPorts": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "HostSG",
            "GroupId"
          ]
        },
        "IpProtocol": "udp",
        "FromPort": "0",
        "ToPort": "65535",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "HostTCPPorts": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "HostSG",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": "0",
        "ToPort": "65535",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "zoneinternalidns": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "Name": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" } , ".",  { "Ref" : "GUID" },".internal." ]]},

        "VPCs" :  [{
      "VPCId": { "Ref" : "Vpc" },
      "VPCRegion": { "Ref": "AWS::Region" } } ],
        "HostedZoneConfig": {
          "Comment": "Created By ansible agnostic deployer"
        }
      }
    },

    "NodeLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMapping",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": "t2.large",
        "KeyName": { "Ref" : "KEYNAME" },
        "SecurityGroups": [
          {
            "Ref": "HostSG"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": 30
            }
          },
          {
            "DeviceName": "/dev/xvdb",
            "Ebs": {
              "VolumeSize": 100
            }
          }
        ]
      }
    },
    "NodeAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": 2,
        "LaunchConfigurationName": {
          "Ref": "NodeLC"
        },
        "MaxSize": 100,
        "MinSize": 1,
        "Tags": [
          {
            "Key": "Name",
            "Value": "host",
            "PropagateAtLaunch": true
          },
          {
            "Key": "AnsibleGroup",
            "Value": "hosts",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Project",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" }]]},
            "PropagateAtLaunch": true
          },
          {
            "Key": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" } ]]},
            "Value": "node",
            "PropagateAtLaunch": true
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "MasterLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMapping",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": "t2.large",
        "KeyName": { "Ref" : "KEYNAME" },
        "SecurityGroups": [
          {
            "Ref": "HostSG"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": 30
            }
          },
          {
            "DeviceName": "/dev/xvdb",
            "Ebs": {
              "VolumeSize": 100
            }
          }
        ]
      }
    },
    "MasterAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": 1,
        "LaunchConfigurationName": {
          "Ref": "MasterLC"
        },
        "MaxSize": 100,
        "MinSize": 1,
        "LoadBalancerNames": [
          {
            "Ref": "elbmasterlb"
          }
        ],



        "Tags": [
          {
            "Key": "Name",
            "Value": "master",
            "PropagateAtLaunch": true
          },
          {
            "Key": "AnsibleGroup",
            "Value": "masters",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Project",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" }]]},
            "PropagateAtLaunch": true
          },
          {
            "Key": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" } ]]},
            "Value": "master",
            "PropagateAtLaunch": true
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "InfranodeLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMapping",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": "t2.large",
        "KeyName": { "Ref" : "KEYNAME" },
        "SecurityGroups": [
          {
            "Ref": "HostSG"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": 30
            }
          },
          {
            "DeviceName": "/dev/xvdb",
            "Ebs": {
              "VolumeSize": 100
            }
          }
        ]
      }
    },
    "InfranodeAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": 1,
        "LaunchConfigurationName": {
          "Ref": "InfranodeLC"
        },
        "MaxSize": 100,
        "MinSize": 1,
        "LoadBalancerNames": [
          {
            "Ref": "elbrouterlb"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "host",
            "PropagateAtLaunch": true
          },
          {
            "Key": "AnsibleGroup",
            "Value": "hosts",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Project",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" }]]},
            "PropagateAtLaunch": true
          },
          {
            "Key": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" } ]]},
            "Value": "infranode",
            "PropagateAtLaunch": true
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "SupportLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMapping",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": "c3.large",
        "KeyName": { "Ref" : "KEYNAME" },
        "SecurityGroups": [
          {
            "Ref": "HostSG"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": 30
            }
          },
          {
            "DeviceName": "/dev/xvdb",
            "Ebs": {
              "VolumeSize": 200,
              "VolumeType": "gp2"
            }
          }
        ]
      }
    },
    "SupportAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": 1,
        "LaunchConfigurationName": {
          "Ref": "NodeLC"
        },
        "MaxSize": 5,
        "MinSize": 1,
        "Tags": [
          {
            "Key": "Name",
            "Value": "supporthost",
            "PropagateAtLaunch": true
          },
          {
            "Key": "AnsibleGroup",
            "Value": "support",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Project",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" } ]] },
            "PropagateAtLaunch": true
          },
          {
            "Key": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" } ]]},
            "Value": "nfs",
            "PropagateAtLaunch": true
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "elbrouterlb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "TCP:80",
          "Timeout": "3",
          "UnhealthyThreshold": "2"
        },
        "ConnectionDrainingPolicy": {
          "Enabled": "false",
          "Timeout": "300"
        },
        "ConnectionSettings": {
          "IdleTimeout": "60"
        },
        "CrossZone": "true",
        "SecurityGroups": [
          {
            "Ref": "HostSG"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          },
          {
            "InstancePort": "443",
            "LoadBalancerPort": "443",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP"
          }
        ],
        "Tags": [
          {
            "Key": "Project",
            "Value": { "Ref" : "GUID" }
          }
        ]
      }
    },
    "elbmasterlb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "TCP:8443",
          "Timeout": "3",
          "UnhealthyThreshold": "2"
        },
        "ConnectionDrainingPolicy": {
          "Enabled": "false",
          "Timeout": "300"
        },
        "ConnectionSettings": {
          "IdleTimeout": "60"
        },
        "CrossZone": "true",
        "SecurityGroups": [
          {
            "Ref": "HostSG"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "8443",
            "LoadBalancerPort": "8443",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP"
          }
        ],
        "Tags": [
        {
          "Key": "Project",
          "Value": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" } ]] }
        }
        ]
      }
    },
    "BastionDNS": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneId": "Z3IHLWJZOU9SRT",
        "RecordSets": [
          {
            "Name": { "Fn::Join" : ["", [ "bastion.",  { "Ref" : "GUID" }, ".example.opentlc.com." ]]},

            "Type": "A",
            "TTL": "10",
            "ResourceRecords": [
              {
                "Fn::GetAtt": [
                  "Bastion",
                  "PublicIp"
                ]
              }
            ]
          }
        ]
      }
    },
    "MasterDNS": {
      "Type": "AWS::Route53::RecordSetGroup",
      "DependsOn": "elbmasterlb",
      "Properties": {
        "HostedZoneId": "Z3IHLWJZOU9SRT",
        "RecordSets": [
          {
            "Name": { "Fn::Join" : ["", ["master.",  { "Ref" : "GUID" },".example.opentlc.com." ]]},
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "elbmasterlb",
                  "CanonicalHostedZoneNameID"
                ]
              },
              "DNSName": {
                "Fn::GetAtt": [
                  "elbmasterlb",
                  "CanonicalHostedZoneName"
                ]
              }
            }
          }
        ]
      }
    },
    "CloudDNS": {
      "Type": "AWS::Route53::RecordSetGroup",
      "DependsOn": "Bastion",
      "Properties": {
        "HostedZoneId": "Z3IHLWJZOU9SRT",
        "RecordSets": [
          {
            "Name": { "Fn::Join" : ["", ["*.apps.",  { "Ref" : "GUID" },".example.opentlc.com." ]]},
            "Type": "A",
            "TTL": "10",
            "ResourceRecords": [
              {
                "Fn::GetAtt": [
                  "Bastion",
                  "PublicIp"
                ]
              }
            ]
          }
        ]
      }
    },
    "Bastion": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMapping",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": "t2.small",
        "KeyName": { "Ref" : "KEYNAME" },
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "HostSG",
              "GroupId"
            ]
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "bastion"
          },
          {
            "Key": "AnsibleGroup",
            "Value": "bastions"
          },
          {
            "Key": "Project",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" } ]]}
          },
          {
            "Key": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" } ]]},
            "Value": "bastion"
          }
        ]
      }
    },
    "RegistryS3": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" } ]]},
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", ["s3-", { "Ref" : "ENVTYPE" } , "-",  { "Ref" : "GUID" },".example.opentlc.com."]] }

          },
          {
            "Key": "Project",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "ENVTYPE" }, "-", { "Ref" : "GUID" } ]]}
          }
        ]
      }
    }
  },
  "Parameters": {
    "GUID": {
      "Type": "String"
    },
    "ENVTYPE": {
      "Type": "String"
    },
    "KEYNAME": {
      "Type": "String"
    }
  },

  "Outputs": {
  "RegistryS3Output": {
    "Description": "The ID of the S3 Bucket",
    "Value": {
      "Ref": "RegistryS3"
    }},
    "Route53internalzoneOutput": {
      "Description": "The ID of the internal route 53 zone",
      "Value": {
        "Ref": "zoneinternalidns"
      }
  }
}
}
