- name: Create user-vols on the support host
  hosts: "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_support') | replace('-', '_') }}"
  gather_facts: False
  become: yes
  vars_files:
    - "../../configs/{{ env_type }}/env_vars.yml"
  tasks:
    - name: Create user vols
      shell: "mkdir -p /srv/nfs/user-vols/vol{1..{{user_vols}}}"
    - name: chmod the user vols
      shell: "chmod -R 777 /srv/nfs/user-vols"

- name: Create System PVs and user PVs
  hosts: "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_bastion') | replace('-', '_') }}"
  gather_facts: False
  become: yes
  vars_files:
    - "../../configs/{{ env_type }}/env_vars.yml"
  tasks:
    - name: get nfs Hostname
      set_fact:
        nfs_host: "{{item}}"
      with_items:
        - "{{groups['tag_AnsibleGroup_support']}}"
      when: '"{{env_type}}-{{guid}}" in hostvars[item].{{cloud_provider}}_tag_Project'

    - set_fact:
        pv_size: '10Gi'
        pv_list: "{{ ocp_pvs }}"
        persistentVolumeReclaimPolicy: Retain

    - name: Generate PV file
      template:
        src: "{{playbook_dir}}/files/pvs.j2"
        dest: "/root//pvs-{{ env_type }}-{{ guid }}.yml"
      tags: [ gen_pv_file ]

    - set_fact:
        pv_size: "{{user_vols_size}}"
        persistentVolumeReclaimPolicy: Recycle

      notify: restart nfs services
      run_once: True

    - name: Generate user vol PV file
      template:
        src: "{{playbook_dir}}/files/userpvs.j2"
        dest: "/root/userpvs-{{ env_type }}-{{ guid }}.yml"
      tags:
        - gen_user_vol_pv

    - shell: 'oc create -f /root/pvs-{{ env_type }}-{{ guid }}.yml || oc update -f /root/pvs-{{ env_type }}-{{ guid }}.yml'

    - shell: 'oc create -f /root/userpvs-{{ env_type }}-{{ guid }}.yml || oc update -f /root/userpvs-{{ env_type }}-{{ guid }}.yml'

- name: env-specific infrastructure
  hosts: "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_master') | replace('-', '_') }}"
  become: yes
  gather_facts: False
  vars_files:
    - "../../configs/{{ env_type }}/env_vars.yml"
  tags:
    - env-specific
    - env-specific_infra
  tasks:

    - name: Give administrative user cluster-admin privileges
      command: "oc adm policy add-cluster-role-to-user cluster-admin {{ admin_user }}"

    - name: Check for admin_project project
      command: "oc get project {{admin_project}}"
      register: result
      ignore_errors: true
    - name: Create admin_project project
      command: "oc adm new-project {{admin_project}} --admin {{admin_user}} --node-selector='env=infra'"
      when: result | failed

    - name: Make admin_project project network global
      command: "oc adm pod-network make-projects-global {{admin_project}}"

    - name: Set admin_project SCC for anyuid
      command: "oc adm policy add-scc-to-group anyuid system:serviceaccounts:{{admin_project}}"

    - name: Add capabilities within anyuid which is not really ideal
      command: "oc patch scc/anyuid --patch '{\"requiredDropCapabilities\":[\"MKNOD\",\"SYS_CHROOT\"]}'"

- name: node admin configs
  hosts: "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_node') | replace('-', '_') }}"
  gather_facts: False
  become: yes
  vars_files:
    - "../../configs/{{ env_type }}/env_vars.yml"
  tags:
    - env-specific
    - env_specific_images
  tasks:

    - name: 'Pull image'
      command: "docker pull {{ item }}"
      with_items: '{{ env_specific_images }}'

    - name: configure syslogd
      copy:
        src: ./files/logrotate.d_syslog
        dest: /etc/logrotate.d/syslog

    - name: Insert Garbage collection block
      tags:
        - garbage_collection_block
      blockinfile:
        state: present
        dest: "/etc/origin/node/node-config.yaml"
        marker: "### {mark} ANSIBLE MANAGED BLOCK ###"
        insertafter: "kubeletArguments:"
        block: |2
            image-gc-high-threshold:
              - "90"
            image-gc-low-threshold:
              - "80"
    - name: restart atomic node after changes
      shell: "systemctl restart atomic-openshift-node.service"
      tags:
        - garbage_collection_block

- name: Install Nexus
  hosts: "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_master') | replace('-', '_') }}"
  gather_facts: False
  become: yes
  vars_files:
    - "../../configs/{{ env_type }}/env_vars.yml"
  run_once: true
  roles:
    - { role: "../../roles/nexus2-container", desired_project: "{{admin_project}}" }
  tags:
    - env-specific
    - install_nexus
